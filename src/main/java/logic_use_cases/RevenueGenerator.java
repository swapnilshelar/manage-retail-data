package logic_use_cases;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;

import static org.apache.spark.sql.functions.*;

public class RevenueGenerator {
    public RevenueGenerator() {
        PropertyConfigurator.configure("src/main/resources/log4j_use_case.properties");
    }
    private String orderItemSubtotal="order_item_subtotal";
    private String customerId="customer_id";
    private String categoryId="category_id";
    private String customerRevenue="customer_revenue";
    public Dataset<Row> resultRevenueCategory;
    public Dataset<Row> resultRevenueCust;
    private static Logger logger = Logger.getLogger("RevenueGenerator");

    /* Usecase 3 - Revenue Per Customer
       Get the revenue generated by each customer for the month of 2014 January
       * Tables - orders, order_items and customers
       * Data should be sorted in descending order by revenue and then ascending order by customer_id
       * Output should contain customer_id, customer_first_name, customer_last_name, customer_revenue.
       * If there are no orders placed by customer, then the corresponding revenue for a give customer should be 0.
       * Consider only COMPLETE and CLOSED orders
 */
    public void revenuePerCust(Dataset<Row> orderData, Dataset<Row> customerData, Dataset<Row> ordItemsData, String writeDir) {

        Dataset<Row> newOrderData = orderData.filter("order_date like '2014-01%' AND order_status in ('COMPLETE','CLOSED')");
        resultRevenueCust = newOrderData.join(ordItemsData, newOrderData.col("order_id")
                        .equalTo(ordItemsData.col("order_item_order_id")))
                .join(customerData, newOrderData.col("order_customer_id")
                        .equalTo(customerData.col(customerId)), "right_outer")
                .groupBy(customerId, "customer_fname", "customer_lname")
                .agg(sum(orderItemSubtotal).alias(customerRevenue))
                .withColumn("revenue_per_customer",
                        when(col(customerRevenue).isNotNull(), col(customerRevenue))
                                .otherwise(0));
        resultRevenueCust.show();
        logger.info("Result - Revenue per customer is ready");
        resultRevenueCust.coalesce(1).write().option("header", "true").mode("overwrite")
                .csv(writeDir + "\\" + "revenue_per_customer");
    }

    /*
         Usecase 4 - Revenue Per Category
         Get the revenue generated for each category for the month of 2014 January
         * Tables - orders, order_items, products and categories
         * Data should be sorted in ascending order by category_id.
         * Output should contain all the fields from category along with the revenue as category_revenue.
         * Consider only COMPLETE and CLOSED orders
    */
    public void revenuePerCategory(Dataset<Row> orderData, Dataset<Row> categoryData, Dataset<Row> ordItemsData, Dataset<Row> prodData, String writeDir) {

        resultRevenueCategory = orderData.join(ordItemsData, orderData.col("order_id")
                        .equalTo(ordItemsData.col("order_item_order_id")))
                .join(prodData, ordItemsData.col("order_item_product_id")
                        .equalTo(prodData.col("product_id")))
                .join(categoryData, categoryData.col(categoryId)
                        .equalTo(prodData.col("product_category_id")))
                .withColumn("order_item_subtotal_int", ordItemsData.col(orderItemSubtotal).cast("int"))
                .filter("order_date like '2014-01%' AND order_status in ('COMPLETE','CLOSED')")
                .groupBy(categoryId, "category_department_id", "category_name")
                .sum("order_item_subtotal_int").alias("revenue_per_category")
                .orderBy(col(categoryId).cast("int"));
        resultRevenueCategory.show();
        logger.info("Result - Revenue per customer is ready");
        resultRevenueCategory.coalesce(1).write().option("header", "true").mode("overwrite")
                .csv(writeDir + "\\" + "revenue_per_category");
    }
}

